{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPscH/Lm1tSNtVVbcxA+yPG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Febilid/Pem_Mesin/blob/main/UTS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "zgBFgtBFJ4g_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c00fb20-534b-4ae2-8003-ba933dbc381a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 418ms/step - accuracy: 0.1860 - loss: 1.7460 - val_accuracy: 0.1282 - val_loss: 1.9224\n",
            "Epoch 2/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 222ms/step - accuracy: 0.2256 - loss: 1.6576 - val_accuracy: 0.2821 - val_loss: 1.6914\n",
            "Epoch 3/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 190ms/step - accuracy: 0.3833 - loss: 1.5565 - val_accuracy: 0.3590 - val_loss: 1.6708\n",
            "Epoch 4/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 197ms/step - accuracy: 0.4485 - loss: 1.4231 - val_accuracy: 0.5641 - val_loss: 1.4590\n",
            "Epoch 5/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 188ms/step - accuracy: 0.5050 - loss: 1.3164 - val_accuracy: 0.5897 - val_loss: 1.3611\n",
            "Epoch 6/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 192ms/step - accuracy: 0.5015 - loss: 1.2442 - val_accuracy: 0.5897 - val_loss: 1.2601\n",
            "Epoch 7/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 195ms/step - accuracy: 0.6783 - loss: 0.9845 - val_accuracy: 0.5897 - val_loss: 1.2387\n",
            "Epoch 8/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 172ms/step - accuracy: 0.6054 - loss: 1.0319 - val_accuracy: 0.6154 - val_loss: 1.2382\n",
            "Epoch 9/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 168ms/step - accuracy: 0.6606 - loss: 0.9100 - val_accuracy: 0.6410 - val_loss: 1.1888\n",
            "Epoch 10/10\n",
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 183ms/step - accuracy: 0.7037 - loss: 0.7969 - val_accuracy: 0.6410 - val_loss: 1.0574\n",
            "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 93ms/step\n",
            "Accuracy: 0.7292\n",
            "Precision: 0.7066\n",
            "Recall: 0.7292\n",
            "F1 Score: 0.7110\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from google.colab import drive\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Set the correct path to your dataset in Google Drive\n",
        "data_dir = '/content/drive/MyDrive/casia-webface'  # Ganti dengan path yang sesuai\n",
        "\n",
        "# Load Data (limited to first 50 images per label)\n",
        "images, labels = [], []\n",
        "max_images = 50  # Limit to 50 images per label\n",
        "\n",
        "for label in os.listdir(data_dir):\n",
        "    class_dir = os.path.join(data_dir, label)\n",
        "    if not os.path.isdir(class_dir):\n",
        "        continue  # Skip non-directory files\n",
        "    count = 0\n",
        "    for img_file in os.listdir(class_dir):\n",
        "        if count >= max_images:\n",
        "            break\n",
        "        img_path = os.path.join(class_dir, img_file)\n",
        "        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n",
        "        if img is not None:  # Ensure image is valid\n",
        "            img = cv2.resize(img, (64, 64))  # Resize to 64x64 for uniformity\n",
        "            images.append(img)\n",
        "            labels.append(label)\n",
        "            count += 1\n",
        "\n",
        "images = np.array(images)\n",
        "labels = np.array(labels)\n",
        "\n",
        "# Split Data into Training and Testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, stratify=labels, random_state=42)\n",
        "\n",
        "# Preprocess Data\n",
        "X_train = X_train.reshape(-1, 64, 64, 1) / 255.0  # Rescale and add channel dimension\n",
        "X_test = X_test.reshape(-1, 64, 64, 1) / 255.0\n",
        "unique_labels = np.unique(labels)\n",
        "label_map = {label: index for index, label in enumerate(unique_labels)}\n",
        "y_train = to_categorical([label_map[label] for label in y_train], num_classes=len(unique_labels))\n",
        "y_test = to_categorical([label_map[label] for label in y_test], num_classes=len(unique_labels))\n",
        "\n",
        "# Feature Extraction (optional with additional processing)\n",
        "datagen = ImageDataGenerator(featurewise_center=True, featurewise_std_normalization=True)\n",
        "datagen.fit(X_train)\n",
        "\n",
        "# Build the Model\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(len(unique_labels), activation='softmax')\n",
        "])\n",
        "\n",
        "# Compile Model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Train the Model\n",
        "model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)\n",
        "\n",
        "# Evaluate the Model\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred_labels = np.argmax(y_pred, axis=1)\n",
        "y_test_labels = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Calculate Evaluation Metrics\n",
        "accuracy = accuracy_score(y_test_labels, y_pred_labels)\n",
        "precision = precision_score(y_test_labels, y_pred_labels, average='weighted')\n",
        "recall = recall_score(y_test_labels, y_pred_labels, average='weighted')\n",
        "f1 = f1_score(y_test_labels, y_pred_labels, average='weighted')\n",
        "\n",
        "# Display Results\n",
        "print(f'Accuracy: {accuracy:.4f}')\n",
        "print(f'Precision: {precision:.4f}')\n",
        "print(f'Recall: {recall:.4f}')\n",
        "print(f'F1 Score: {f1:.4f}')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from skimage.feature import hog\n",
        "from tqdm import tqdm\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set dataset path\n",
        "dataset_path = '/content/drive/MyDrive/casia-webface'\n",
        "\n",
        "# 1. Load Data and Analyze Memory Requirements\n",
        "def get_available_ram():\n",
        "    \"\"\"Get available RAM in bytes.\"\"\"\n",
        "    return psutil.virtual_memory().available\n",
        "\n",
        "def calculate_image_memory(image_shape, dtype_size=4):\n",
        "    \"\"\"Calculate memory needed for one image in bytes.\"\"\"\n",
        "    return np.prod(image_shape) * dtype_size\n",
        "\n",
        "# 2. Preprocess Images in Batches\n",
        "def preprocess_images_in_batches(image_paths, batch_size=32, target_size=(112, 112)):\n",
        "    \"\"\"Preprocess images in batches: grayscale, resize, histogram equalization.\"\"\"\n",
        "    processed_images = []\n",
        "    for i in tqdm(range(0, len(image_paths), batch_size), desc=\"Preprocessing images in batches\"):\n",
        "        batch = image_paths[i:i + batch_size]\n",
        "        batch_processed_images = []\n",
        "        for img_path in batch:\n",
        "            img = cv2.imread(img_path)\n",
        "            if img is not None:\n",
        "                img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
        "                img = cv2.resize(img, target_size)\n",
        "                img = cv2.equalizeHist(img)  # Apply histogram equalization\n",
        "                img = img / 255.0  # Normalize pixel values\n",
        "                batch_processed_images.append(img)\n",
        "        processed_images.extend(batch_processed_images)\n",
        "    return np.array(processed_images)\n",
        "\n",
        "# 3. Feature Extraction using HOG\n",
        "def extract_hog_features(images, pixels_per_cell=(8, 8), cells_per_block=(2, 2)):\n",
        "    \"\"\"Extract HOG features from images.\"\"\"\n",
        "    features = []\n",
        "    for img in images:\n",
        "        feature_vector, _ = hog(\n",
        "            img, pixels_per_cell=pixels_per_cell,\n",
        "            cells_per_block=cells_per_block, visualize=True,\n",
        "            feature_vector=True, block_norm='L2-Hys'\n",
        "        )\n",
        "        features.append(feature_vector)\n",
        "    return np.array(features)\n",
        "\n",
        "# 4. Load, preprocess, and extract features from the dataset\n",
        "def load_and_process_data(dataset_path, target_size=(112, 112), batch_size=32):\n",
        "    # Analyze dataset and preprocess images\n",
        "    print(\"Loading dataset...\")\n",
        "    image_paths = []\n",
        "    labels = []\n",
        "\n",
        "    for label in os.listdir(dataset_path):\n",
        "        label_path = os.path.join(dataset_path, label)\n",
        "        if os.path.isdir(label_path):\n",
        "            for img_file in os.listdir(label_path):\n",
        "                img_path = os.path.join(label_path, img_file)\n",
        "                image_paths.append(img_path)\n",
        "                labels.append(label)\n",
        "\n",
        "    print(f\"Total images: {len(image_paths)}\")\n",
        "\n",
        "    # Preprocess the images in batches\n",
        "    processed_images = preprocess_images_in_batches(image_paths, batch_size=batch_size, target_size=target_size)\n",
        "\n",
        "    # Extract HOG features\n",
        "    print(\"Extracting HOG features...\")\n",
        "    features = extract_hog_features(processed_images)\n",
        "\n",
        "    return features, np.array(labels)\n",
        "\n",
        "# 5. Encode labels and split dataset\n",
        "def encode_and_split_data(features, labels, test_size=0.2):\n",
        "    le = LabelEncoder()\n",
        "    labels_encoded = le.fit_transform(labels)\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(features, labels_encoded, test_size=test_size, random_state=42, stratify=labels_encoded)\n",
        "\n",
        "    scaler = StandardScaler()\n",
        "    X_train_scaled = scaler.fit_transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    return X_train_scaled, X_test_scaled, y_train, y_test, le.classes_\n",
        "\n",
        "# 6. Build a simple Neural Network model\n",
        "def build_model(input_shape, num_classes):\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(128, activation='relu', input_shape=(input_shape,)),\n",
        "        tf.keras.layers.Dense(64, activation='relu'),\n",
        "        tf.keras.layers.Dense(num_classes, activation='softmax')\n",
        "    ])\n",
        "    model.compile(optimizer='adam',\n",
        "                  loss='sparse_categorical_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "# 7. Plot training history\n",
        "def plot_training_history(history):\n",
        "    # Plot accuracy\n",
        "    plt.figure(figsize=(12, 5))\n",
        "\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "    plt.title('Model Accuracy')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.legend(loc='upper left')\n",
        "\n",
        "    # Plot loss\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(history.history['loss'], label='Train Loss')\n",
        "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "    plt.title('Model Loss')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.legend(loc='upper left')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Example execution:\n",
        "features, labels = load_and_process_data(dataset_path)\n",
        "X_train, X_test, y_train, y_test, class_labels = encode_and_split_data(features, labels)\n",
        "\n",
        "# Build and train the model\n",
        "model = build_model(X_train.shape[1], len(class_labels))\n",
        "history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=32)\n",
        "\n",
        "# Plot the training history\n",
        "plot_training_history(history)\n",
        "\n",
        "# Evaluate the model\n",
        "test_loss, test_accuracy = model.evaluate(X_test, y_test)\n",
        "print(f\"Test Accuracy: {test_accuracy:.4f}\")\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "# Calculate additional metrics\n",
        "accuracy = accuracy_score(y_test, y_pred_classes)\n",
        "precision = precision_score(y_test, y_pred_classes, average='macro')\n",
        "recall = recall_score(y_test, y_pred_classes, average='macro')\n",
        "f1 = f1_score(y_test, y_pred_classes, average='macro')\n",
        "\n",
        "# Print the results\n",
        "print(f\"Accuracy: {accuracy:.4f}\")\n",
        "print(f\"Precision: {precision:.4f}\")\n",
        "print(f\"Recall: {recall:.4f}\")\n",
        "print(f\"F1 Score: {f1:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ue524cRzVQS_",
        "outputId": "faed89c8-66fc-4319-862d-ee1b351f8317"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading dataset...\n",
            "Total images: 843\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Preprocessing images in batches: 100%|██████████| 27/27 [00:06<00:00,  4.12it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting HOG features...\n",
            "Epoch 1/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 22ms/step - accuracy: 0.5790 - loss: 1.2662 - val_accuracy: 0.8521 - val_loss: 0.4520\n",
            "Epoch 2/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9767 - loss: 0.0586 - val_accuracy: 0.8757 - val_loss: 0.4784\n",
            "Epoch 3/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - accuracy: 1.0000 - loss: 0.0077 - val_accuracy: 0.8817 - val_loss: 0.5133\n",
            "Epoch 4/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 0.8935 - val_loss: 0.5025\n",
            "Epoch 5/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 18ms/step - accuracy: 1.0000 - loss: 0.0010 - val_accuracy: 0.8994 - val_loss: 0.4957\n",
            "Epoch 6/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - accuracy: 1.0000 - loss: 8.0466e-04 - val_accuracy: 0.8935 - val_loss: 0.4942\n",
            "Epoch 7/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 5.8280e-04 - val_accuracy: 0.8935 - val_loss: 0.4946\n",
            "Epoch 8/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step - accuracy: 1.0000 - loss: 4.3487e-04 - val_accuracy: 0.8935 - val_loss: 0.4964\n",
            "Epoch 9/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 27ms/step - accuracy: 1.0000 - loss: 5.1252e-04 - val_accuracy: 0.8935 - val_loss: 0.4980\n",
            "Epoch 10/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 27ms/step - accuracy: 1.0000 - loss: 3.8948e-04 - val_accuracy: 0.8935 - val_loss: 0.4993\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAHqCAYAAADVi/1VAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACZaUlEQVR4nOzdeXhTZdrH8V+S7iulLS1gobTsiIAgiLiOaAFFRVEEFUHU1wW3uqIIuOKKjCujA6KOAi7oOAOCWEVBEBQGV9YWKDttofuenPePNIHQFtrSNkn7/VxXrpKT55zcCVz28T73cz8mwzAMAQAAAAAAAI3I7O4AAAAAAAAA0PyQlAIAAAAAAECjIykFAAAAAACARkdSCgAAAAAAAI2OpBQAAAAAAAAaHUkpAAAAAAAANDqSUgAAAAAAAGh0JKUAAAAAAADQ6EhKAQAAAAAAoNGRlALg0Uwmk6ZNm1br83bs2CGTyaS5c+fWe0wAAABNGfMvAI2FpBSAE5o7d65MJpNMJpNWrlxZ6XXDMBQXFyeTyaRLL73UDRHWj8WLF8tkMqlNmzay2WzuDgcAADRjTXn+tXz5cplMJn366afuDgWAm5GUAlBjAQEB+uijjyod//7777V79275+/u7Iar68+GHHyo+Pl779u3Tt99+6+5wAAAAmvz8C0DzRlIKQI0NGzZMn3zyicrLy12Of/TRR+rbt69iY2PdFNnJKygo0L///W8lJyerT58++vDDD90dUrUKCgrcHQIAAGgkTXn+BQAkpQDU2OjRo5WVlaVly5Y5j5WWlurTTz/VmDFjqjynoKBA999/v+Li4uTv768uXbropZdekmEYLuNKSkp03333KTo6WqGhobrsssu0e/fuKq+5Z88e3XTTTYqJiZG/v7969OihOXPmnNRn+/zzz1VUVKSrr75a1157rRYuXKji4uJK44qLizVt2jR17txZAQEBat26ta688kqlpqY6x9hsNv39739Xz549FRAQoOjoaA0ZMkS//PKLpOP3Wzi2h8O0adNkMpn0119/acyYMYqIiNDZZ58tSfrtt980btw4JSQkKCAgQLGxsbrpppuUlZVV5Xc2YcIEtWnTRv7+/urQoYNuv/12lZaWKi0tTSaTSa+88kql81atWiWTyaR58+bV9isFAAD1oCnPv04kLS1NV199tVq2bKmgoCCdeeaZWrRoUaVxr732mnr06KGgoCBFRESoX79+LtVleXl5uvfeexUfHy9/f3+1atVKF110kdavX9+g8QM4MR93BwDAe8THx2vgwIGaN2+ehg4dKkn66quvlJOTo2uvvVavvvqqy3jDMHTZZZfpu+++04QJE9S7d28tXbpUDz74oPbs2eOSBLn55pv1r3/9S2PGjNFZZ52lb7/9VpdcckmlGA4cOKAzzzxTJpNJEydOVHR0tL766itNmDBBubm5uvfee+v02T788ENdcMEFio2N1bXXXqtHHnlE//nPf3T11Vc7x1itVl166aVKSUnRtddeq3vuuUd5eXlatmyZ/vjjDyUmJkqSJkyYoLlz52ro0KG6+eabVV5erhUrVuinn35Sv3796hTf1VdfrU6dOunZZ591TiiXLVumtLQ0jR8/XrGxsfrzzz/19ttv688//9RPP/0kk8kkSdq7d6/69++v7Oxs3Xrrreratav27NmjTz/9VIWFhUpISNCgQYP04Ycf6r777qv0vYSGhuryyy+vU9wAAODkNOX51/EcOHBAZ511lgoLC3X33XcrMjJS7733ni677DJ9+umnGjFihCTpnXfe0d13362RI0fqnnvuUXFxsX777TetWbPGmbS77bbb9Omnn2rixInq3r27srKytHLlSm3cuFGnn356vccOoBYMADiBd99915Bk/Pzzz8brr79uhIaGGoWFhYZhGMbVV19tXHDBBYZhGEb79u2NSy65xHneF198YUgynn76aZfrjRw50jCZTMa2bdsMwzCMDRs2GJKMO+64w2XcmDFjDEnG1KlTnccmTJhgtG7d2sjMzHQZe+211xrh4eHOuLZv325IMt59990Tfr4DBw4YPj4+xjvvvOM8dtZZZxmXX365y7g5c+YYkowZM2ZUuobNZjMMwzC+/fZbQ5Jx9913VzvmeLEd+3mnTp1qSDJGjx5daazjsx5t3rx5hiTjhx9+cB4bO3asYTabjZ9//rnamP7xj38YkoyNGzc6XystLTWioqKMG2+8sdJ5AACgYTXl+dd3331nSDI++eSTasfce++9hiRjxYoVzmN5eXlGhw4djPj4eMNqtRqGYRiXX3650aNHj+O+X3h4uHHnnXcedwwA92D5HoBaueaaa1RUVKT//ve/ysvL03//+99qS8cXL14si8Wiu+++2+X4/fffL8Mw9NVXXznHSao07ti7boZh6LPPPtPw4cNlGIYyMzOdj6SkJOXk5NSpDHv+/Pkym8266qqrnMdGjx6tr776SocPH3Ye++yzzxQVFaW77rqr0jUcVUmfffaZTCaTpk6dWu2YurjtttsqHQsMDHT+ubi4WJmZmTrzzDMlyfk92Gw2ffHFFxo+fHiVVVqOmK655hoFBAS49NJaunSpMjMzdf3119c5bgAAcPKa4vzrRBYvXqz+/fs72xZIUkhIiG699Vbt2LFDf/31lySpRYsW2r17t37++edqr9WiRQutWbNGe/furfc4AZwcklIAaiU6OlqDBw/WRx99pIULF8pqtWrkyJFVjt25c6fatGmj0NBQl+PdunVzvu74aTabncvfHLp06eLyPCMjQ9nZ2Xr77bcVHR3t8hg/frwk6eDBg7X+TP/617/Uv39/ZWVladu2bdq2bZv69Omj0tJSffLJJ85xqamp6tKli3x8ql/5nJqaqjZt2qhly5a1juN4OnToUOnYoUOHdM899ygmJkaBgYGKjo52jsvJyZFk/85yc3N16qmnHvf6LVq00PDhw136L3z44Ydq27at/va3v9XjJwEAALXVFOdfJ7Jz585KsVT1OR5++GGFhISof//+6tSpk+688079+OOPLue88MIL+uOPPxQXF6f+/ftr2rRpSktLq/eYAdQePaUA1NqYMWN0yy23aP/+/Ro6dKhatGjRKO9rs9kkSddff71uvPHGKsecdtpptbrm1q1bnXfWOnXqVOn1Dz/8ULfeemstIz2+6iqmrFZrteccXRXlcM0112jVqlV68MEH1bt3b4WEhMhms2nIkCHO76o2xo4dq08++USrVq1Sz5499eWXX+qOO+6Q2cz9CwAA3K0pzb/qU7du3bR582b997//1ZIlS/TZZ5/pzTff1JQpU/TEE09Iss+ZzjnnHH3++ef6+uuv9eKLL+r555/XwoULnX26ALgHSSkAtTZixAj93//9n3766SctWLCg2nHt27fXN998o7y8PJe7dZs2bXK+7vhps9mclUgOmzdvdrmeY2cYq9WqwYMH18tn+fDDD+Xr66sPPvhAFovF5bWVK1fq1VdfVXp6utq1a6fExEStWbNGZWVl8vX1rfJ6iYmJWrp0qQ4dOlRttVRERIQkKTs72+W4445fTRw+fFgpKSl64oknNGXKFOfxrVu3uoyLjo5WWFiY/vjj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OXOmu8MAAADwaMyZAAComluTUj/88IOGDx+uNm3ayGQy6YsvvjjhOcuXL9fpp58uf39/dezYUXPnzq005o033lB8fLwCAgI0YMAArV27tv6D9yImk+m4j2nTptXpuj///LNuvfXWeolx3rx5slgsuvPOO+vlegAAALXlyXOm888/X/fee+9JXQMAAE/j1qRUQUGBevXqpTfeeKNG47dv365LLrlEF1xwgTZs2KB7771XN998s5YuXeocs2DBAiUnJ2vq1Klav369evXqpaSkJOeWsc3Rvn37nI+ZM2cqLCzM5dgDDzzgHGsYhsrLy2t03ejo6HprYDp79mw99NBDmjdvnoqLi+vlmnVVWlrq1vcHAADu4Q1zJgAAmhK3JqWGDh2qp59+WiNGjKjR+FmzZqlDhw56+eWX1a1bN02cOFEjR47UK6+84hwzY8YM3XLLLRo/fry6d++uWbNmKSgoSHPmzGmoj+HxYmNjnY/w8HCZTCbn802bNik0NFRfffWV+vbtK39/f61cuVKpqam6/PLLFRMTo5CQEJ1xxhn65ptvXK57bCm6yWTSP//5T40YMUJBQUHq1KmTvvzyyxPGt337dq1atUqPPPKIOnfurIULF1YaM2fOHPXo0UP+/v5q3bq1Jk6c6HwtOztb//d//6eYmBgFBATo1FNP1X//+19J0rRp09S7d2+Xa82cOVPx8fHO5+PGjdMVV1yhZ555Rm3atFGXLl0kSR988IH69eun0NBQxcbGasyYMZWSm3/++acuvfRShYWFKTQ0VOecc45SU1P1ww8/yNfXV/v373cZf++99+qcc8454XcCAAAan6fPmY7ns88+c86V4uPj9fLLL7u8/uabb6pTp04KCAhQTEyMRo4c6Xzt008/Vc+ePRUYGKjIyEgNHjxYBQUFJxUPAAA14ePuAGpj9erVGjx4sMuxpKQkZylzaWmp1q1bp0mTJjlfN5vNGjx4sFavXt1gcRmGoaIya4NdvzqBvpZ623XkkUce0UsvvaSEhARFRERo165dGjZsmJ555hn5+/vr/fff1/Dhw7V582a1a9eu2us88cQTeuGFF/Tiiy/qtdde03XXXaedO3eqZcuW1Z7z7rvv6pJLLlF4eLiuv/56zZ49W2PGjHG+/tZbbyk5OVnPPfechg4dqpycHP3444+SJJvNpqFDhyovL0//+te/lJiY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qyeeeMLtc6bqpKen6/LLL1dISIjCwsJ0zTXXuOwO+euvv+qCCy5QaGiowsLC1LdvX/3yyy+SpJ07d2r48OGKiIhQcHCwevToocWLF9c5FgCAZ2P5Xn0wDKmssPHf1zdIOqaiqCo+Pj4aO3as5s6dq8cee8xZhfTJJ5/IarVq9OjRys/PV9++ffXwww8rLCxMixYt0g033KDExET179//hO9hs9l05ZVXKiYmRmvWrFFOTo6zl0JuUZm27M9TqdUm/8BgPfPKm+rUoZ32pG3SHbfdplNatdRDDz2kUaNG6Y8//tCSJUucCZfw8PBK71VQUKCkpCQNHDhQP//8sw4ePKibb75ZEydOdJlEfvfdd2rdurW+++47bdu2TaNGjVLv3r11yy23VPs5UlNTtXr1ai1cuFCGYei+++7Tzp071b59e0nSnj17dO655+r888/Xt99+q7CwMP3444/Oaqa33npLycnJeu655zR06FDl5OToxx9/POH3d6xHHnlEL730khISEhQREaFdu3Zp2LBheuaZZ+Tv76/3339fw4cP1+bNm9WuXTtJ9ia2q1ev1quvvqpevXpp+/btyszMlMlk0k033aR3331XDzzwgPM93n33XZ177rnq2LFjreMDAKDW6jhf8jesMpUVqtRqklGiStXUJ1TD+ZLk/jnT0UJDQzV37ly1adNGv//+u2655RaFhoZ6zJzpeJ/PkZD6/vvvVV5erjvvvFOjRo1y3oS77rrr1KdPH7311luyWCzasGGDfH19JUl33nmnSktL9cMPPyg4OFh//fWXQkJCah0HAMA7kJSqD2WF0rNtGv99H90r+dWsP8FNN92kF198Ud9//73OP/98SfakxFVXXaXw8HCFh4e7JCzuuusuLV26VB9//HGNJljffPONNm3apKVLl6pNmzYqs9r0wGPTdN3Iy3WooFSlVpt8zGZNeXyyWjp20jutq9K2bdP8+fP10EMPKTAwUCEhIfLx8VFsbGy17/XRRx+puLhY77//vrM/w+uvv67hw4fr+eefdzZ1jYiI0Ouvvy6LxaKuXbvqkksuUUpKynEnWHPmzNHQoUOdvRiSkpL07rvvatq0aZKkN954Q+Hh4Zo/f75z8tS5c2fn+U8//bTuv/9+3XPPPc5jZ5xxxgm/v2M9+eSTuuiii5zPW7ZsqV69ejmfP/XUU/r888/15ZdfauLEidqyZYs+/vhjLVu2TIMHD5YkJSQkOMePGzdOU6ZM0dq1a9W/f3+VlZXpo48+qlQ9BQBAg6njfClAUs+Ted9azJekxp8zSdKzzz6roUOHuoybPHmy88/x8fF64IEHPGrOVJ2UlBT9/vvv2r59u+Li4iRJ77//vnr06KGff/5ZZ5xxhtLT0/Xggw+qa9eukqROnTo5z09PT9dVV12lnj3tf+tHz2cAAE0Py/eaia5du+qss87SnDlzJEnbtm3TihUrNGHCBEmS1WrVU089pZ49e6ply5YKCQnR0qVLlZ6eXqPrb9y4UXFxcYqMjtHuw4XatD9P7bvZkyi+FrPatghU19hQfffVv3XeuecoNjZWISEhmjx5co3f4+j36tWrl0vD0EGDBslms2nz5s3OYz169HDZ1rp169Y6ePBgtde1Wq167733dP311zuPXX/99Zo7d65sNvuSgQ0bNuicc85xJqSOdvDgQe3du1cXXnhhrT5PVfr16+fyPD8/Xw888IC6deumFi1aKCQkRBs3bnR+dxs2bJDFYtF5551X5fXatGmjSy65xPn3/5///EclJSW6+uqrTzpWAACaksaaMzkSUpI0cODASuMWLFigQYMGeeSc6UTvGRcX50xISVL37t3VokULbdy4UZKUnJysm2++WYMHD9Zzzz3n0gbh7rvv1tNPP61BgwZp6tSp+u233+oUBwDAO1ApVR98g+x34dzxvrUwYcIE3XXXXXrjjTf07rvvKjEx0ZnEePHFF/X3v/9dM2fOVM+ePRUcHKx7771XpaWlNbp2ablV5TZDmw/kOY8F+dn/ebVpEaDIEH+tXr1a1113nZ544gklJSU5K45efvnlWn2Omjo2cWQymZzJpaosXbpUe/bs0ahRo1yOW61WpaSk6KKLLlJgYGC15x/vNUkym+05YMMwnMeq69dw7A49DzzwgJYtW6aXXnpJHTt2VGBgoEaOHOn8+znRe0vSzTffrBtuuEGvvPKK3n33XY0aNarRmq4CAHAy86UdWYXKKy6zzymCa9nEu5bzJalh50w14elzppM1bdo0jRkzRosWLdJXX32lqVOnav78+RoxYoRuvvlmJSUladGiRfr66681ffp0vfzyy7rrrrsaLB4AgPtQKVUfTCZ7WXhjP2rZU+Gaa66R2WzWRx99pPfff1833XSTs1fCjz/+qMsvv1zX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NH7w9czZ7JykFAAAHo+kFKrkmMglkpQCAMDjzZgxQ7fccovGjx8vSZo1a5YWLVqkOXPm6JFHHqk0fs6cOTp06JBWrVolX19fSVJ8fHxjhtxgHDfUUjNYvgcAgKdj+R4qKSgp176cYklH7jYCAADPVFpaqnXr1mnw4MHOY2azWYMHD9bq1aurPOfLL7/UwIEDdeeddyomJkannnqqnn32WVmt1sYKu8E4Wg/syCqQzWa4ORoAAHA8VEqhku2Z9iqplsF+igj2c3M0AADgeDIzM2W1WhUTE+NyPCYmRps2barynLS0NH377be67rrrtHjxYm3btk133HGHysrKNHXq1CrPKSkpUUlJifN5bm5u/X2IehQXEShfi0nFZTbtzSnSKRFB7g4JAABUg0opVOIod0+IYukeAABNkc1mU6tWrfT222+rb9++GjVqlB577DHNmjWr2nOmT5+u8PBw5yMuLq4RI645H4tZ7VraE1H0lQIAwLORlEIlR/pJsXQPAABPFxUVJYvFogMHDrgcP3DggGJjY6s8p3Xr1urcubMsFovzWLdu3bR//36VlpZWec6kSZOUk5PjfOzatav+PkQ9cyzhS6OvFAAAHo2kFCpxVkrR5BwAAI/n5+envn37KiUlxXnMZrMpJSVFAwcOrPKcQYMGadu2bbLZbM5jW7ZsUevWreXnV/XSfX9/f4WFhbk8PJVjDpOWSaUUAACejKQUKnFUSiVQKQUAgFdITk7WO++8o/fee08bN27U7bffroKCAudufGPHjtWkSZOc42+//XYdOnRI99xzj7Zs2aJFixbp2Wef1Z133umuj1CvEqMclVIkpQAA8GQ0OocLm81wNjpPpFIKAACvMGrUKGVkZGjKlCnav3+/evfurSVLljibn6enp8tsPnIvMi4uTkuXLtV9992n0047TW3bttU999yjhx9+2F0foV45K6VYvgcAgEcjKQUX+3KLVVRmlY/ZpLiW7FYDAIC3mDhxoiZOnFjla8uXL690bODAgfrpp58aOCr3cFR7780pVmFpuYL8mPICAOCJWL4HF447iu0ig+Rr4Z8HAADwPi2D/dQiyFeSnBXgAADA85B1gAtnP6ko+kkBAADvlRDlWMJHUgoAAE9FUgouHDvvJbainxQAAPBejiV8VEoBAOC5SErBheNuYiKVUgAAwIvR7BwAAM9HUgouHBO3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PGflypWaPXu2NmzYUONYS0pKVFJS4nyem5tb43O9QUJFXyl24AMAoPHUS1KqqKhIr776qtq2bVsfl8OJGIb0+yfS0sekgopeET2vli5+Rgo9MiEtKbcq/VChJCmRSikAADzOe++9p3/+85+67LLLnMdOO+00tW3bVnfccUeNklK1lZeXpxtuuEHvvPOOoqKianze9OnTm3SrBsdciaQUAACNp9ZJqYiICJlMJudzwzCUl5enoKAg/etf/6rX4FCFjC3SomRpR0WZfWQn6ZKXpYTzKg1NzyqUzZCC/SzO5p0AAMBzHDp0SF27Vt6IpGvXrjp06FCNrhEVFSWLxaIDBw64HD9w4IBiY2MrjU9NTdWOHTs0fPhw5zGbzSZJ8vHx0ebNm5WYmFjpvEmTJik5Odn5PDc3V3FxcTWK0RskVFSVb88qkNVmyGI2neAMAABwsmqdlHrllVdcklJms1nR0dEaMGCAIiJoCtlgSgulFS9JP74q2coknwDp3Aels+6SfKpOOKVW3OlLiA5x+TsDAACeoVevXnr99df16quvuhx//fXXddppp9XoGn5+furbt69SUlJ0xRVXSLInmVJSUjRx4sRK47t27arff//d5djkyZOVl5env//979Ummvz9/eXv33Rvcp0SESQ/i1ml5TbtzS5SXMsgd4cEAECTV+uk1Lhx4xogDBzX5iXSVw9K2en2552HSEOflyLij3taKv2kAADwaC+88IIuueQSffPNNxo4cKAkafXq1dq1a5cWL15c4+skJyfrxhtvVL9+/dS/f3/NnDlTBQUFzt34xo4dq7Zt22r69OkKCAjQqaee6nJ+ixYtJKnS8ebEYjapfWSQth7MV2pGPkkpAAAawYm3dDnGu+++q08++aTS8U8++UTvvfdevQSFCtm7pHljpHmj7AmpsFOkUR9Ko+efMCElHemJwM57AAB4pvPOO09btmzRiBEjlJ2drezsbF155ZX6888/9cEHH9T4OqNGjdJLL72kKVOmqHfv3tqwYYOWLFnibH6enp6uffv2NdTHaDIcS/joKwUAQOMwGYZh1OaEzp076x//+IcuuOACl+Pff/+9br31Vm3evLleA3SH3NxchYeHKycnR2FhYY0fQHmp9NMb0vcvSGWFktlHGnindN7Dkl/Nq55GvPmj/peerdfH9NGlp7VpwIABAGg+GmOe8Ouv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qqRiwvwVGuDr5mgAAACan6OX7xmG4eZoAADwXiSlvIyjTDwhin5SAAAA7hAfGSyTScorLndWsAMAgNojKeVlHA016ScFAADgHgG+FrVtESiJZucAAJwMklJexlkpxc57AAAAbuOYi6XRVwoAgDojKeVlUivuxiVSKQUAAOA2CVFH+koBAIC6ISnlRaw2QzuzCiUd2YoYAAAAjS/R2eycSikAAOrK7UmpN954Q/Hx8QoICNCAAQO0du3a446fOXOmunTposDAQMXFxem+++5TcXHxSV3TW+w+XKhSq01+Pma1qehjAAAAgMbH8j0AAE6eW5NSCxYsUHJysqZOnar169erV69eSkpK0sGDB6sc/9FHH+mRRx7R1KlTtXHjRs2ePVsLFizQo48+WudrehPH0r2EqGBZzCY3RwMAANB8OTadST9UqNJym5ujAQDAO7k1KTVjxgzdcsstGj9+vLp3765Zs2YpKChIc+bMqXL8qlWrNGjQII0ZM0bx8fG6+OKLNXr0aJdKqNpe05scaXJOPykAAAB3ig0LUJCfRVabofRDhe4OBwAAr+S2pFRpaanWrVunwYMHHwnGbNbgwYO1evXqKs8566yztG7dOmcSKi0tTYsXL9awYcPqfE1JKikpUW5ursvDE6U6klJR9JMCAABwJ5PJpA40OwcA4KS4LSmVmZkpq9WqmJgYl+MxMTHav39/leeMGTNGTz75pM4++2z5+voqMTFR559/vnP5Xl2uKUnTp09XeHi48xEXF3eSn65hOHfea0WlFAAAgLvRVwoAgJPj9kbntbF8+XI9++yzevPNN7V+/XotXLhQixYt0lNPPXVS1500aZJycnKcj127dtVTxPUrjUopAAAAj5FApRQAACfFbUmpqKgoWSwWHThwwOX4gQMHFBsbW+U5jz/+uG644QbdfPPN6tmzp0aMGKFnn31W06dPl81mq9M1Jcnf319hYWEuD0+TW1ymzPwSSfSUAgAAldVm9+F33nlH55xzjiIiIhQREaHBgwc3md2KG5NjTua4cQgAAGrHbUkpPz8/9e3bVykpKc5jNptNKSkpGjhwYJXnFBYWymx2DdlisUiSDMOo0zW9hWOyEx3qr9AAXzdHAwAAPEltdx9evny5Ro8ere+++06rV69WXFycLr74Yu3Zs6eRI/duiSzfAwDgpLh1+V5ycrLeeecdvffe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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.8728 - loss: 0.5141 \n",
            "Test Accuracy: 0.8935\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:5 out of the last 13 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x78e9e91ea5f0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step\n",
            "Accuracy: 0.8935\n",
            "Precision: 0.7456\n",
            "Recall: 0.7652\n",
            "F1 Score: 0.7520\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from skimage.feature import hog\n",
        "from tqdm import tqdm\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set dataset path\n",
        "dataset_path = '/content/drive/MyDrive/casia-webface'\n",
        "\n",
        "# 1. Load Data and Analyze Memory Requirements\n",
        "def preprocess_images_in_batches(image_paths, batch_size=32, target_size=(112, 112)):\n",
        "    \"\"\"Preprocess images in batches: grayscale, resize, histogram equalization.\"\"\"\n",
        "    processed_images = []\n",
        "    for i in tqdm(range(0, len(image_paths), batch_size), desc=\"Preprocessing images in batches\"):\n",
        "        batch = image_paths[i:i + batch_size]\n",
        "        batch_processed_images = []\n",
        "        for img_path in batch:\n",
        "            img = cv2.imread(img_path)\n",
        "            if img is not None:\n",
        "                img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
        "                img = cv2.resize(img, target_size)\n",
        "                img = cv2.equalizeHist(img)  # Apply histogram equalization\n",
        "                img = img / 255.0  # Normalize pixel values\n",
        "                batch_processed_images.append(img)\n",
        "        processed_images.extend(batch_processed_images)\n",
        "    return np.array(processed_images)\n",
        "\n",
        "# 2. Feature Extraction using HOG\n",
        "def extract_hog_features(images, pixels_per_cell=(8, 8), cells_per_block=(2, 2)):\n",
        "    \"\"\"Extract HOG features from images.\"\"\"\n",
        "    features = []\n",
        "    for img in images:\n",
        "        feature_vector, _ = hog(\n",
        "            img, pixels_per_cell=pixels_per_cell,\n",
        "            cells_per_block=cells_per_block, visualize=True,\n",
        "            feature_vector=True, block_norm='L2-Hys'\n",
        "        )\n",
        "        features.append(feature_vector)\n",
        "    return np.array(features)\n",
        "\n",
        "# 3. Load, preprocess, and extract features from the dataset\n",
        "def load_and_process_data(dataset_path, target_size=(112, 112), batch_size=32):\n",
        "    print(\"Loading dataset...\")\n",
        "    image_paths = []\n",
        "    labels = []\n",
        "\n",
        "    for label in os.listdir(dataset_path):\n",
        "        label_path = os.path.join(dataset_path, label)\n",
        "        if os.path.isdir(label_path):\n",
        "            for img_file in os.listdir(label_path):\n",
        "                img_path = os.path.join(label_path, img_file)\n",
        "                image_paths.append(img_path)\n",
        "                labels.append(label)\n",
        "\n",
        "    print(f\"Total images: {len(image_paths)}\")\n",
        "\n",
        "    processed_images = preprocess_images_in_batches(image_paths, batch_size=batch_size, target_size=target_size)\n",
        "    print(\"Extracting HOG features...\")\n",
        "    features = extract_hog_features(processed_images)\n",
        "\n",
        "    return features, np.array(labels)\n",
        "\n",
        "# 4. Encode labels and split dataset\n",
        "def encode_and_split_data(features, labels, test_size=0.2):\n",
        "    le = LabelEncoder()\n",
        "    labels_encoded = le.fit_transform(labels)\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(features, labels_encoded, test_size=test_size, random_state=42, stratify=labels_encoded)\n",
        "\n",
        "    scaler = StandardScaler()\n",
        "    X_train_scaled = scaler.fit_transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    return X_train_scaled, X_test_scaled, y_train, y_test, le.classes_\n",
        "\n",
        "# 5. Build a simple Neural Network model\n",
        "def build_model(input_shape, num_classes):\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(128, activation='relu', input_shape=(input_shape,)),\n",
        "        tf.keras.layers.Dense(64, activation='relu'),\n",
        "        tf.keras.layers.Dense(num_classes, activation='softmax')\n",
        "    ])\n",
        "    model.compile(optimizer='adam',\n",
        "                  loss='sparse_categorical_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "# 6. Plot training history\n",
        "def plot_training_history(history):\n",
        "    plt.figure(figsize=(12, 5))\n",
        "\n",
        "    # Plot accuracy\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "    plt.title('Model Accuracy')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.legend(loc='upper left')\n",
        "\n",
        "    # Plot loss\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(history.history['loss'], label='Train Loss')\n",
        "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "    plt.title('Model Loss')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.legend(loc='upper left')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Main Execution\n",
        "features, labels = load_and_process_data(dataset_path)\n",
        "X_train, X_test, y_train, y_test, class_labels = encode_and_split_data(features, labels)\n",
        "\n",
        "# Build and train the model\n",
        "model = build_model(X_train.shape[1], len(class_labels))\n",
        "history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=32)\n",
        "\n",
        "# Plot the training history\n",
        "plot_training_history(history)\n",
        "\n",
        "# Evaluate the model\n",
        "test_loss, test_accuracy = model.evaluate(X_test, y_test)\n",
        "print(f\"Test Accuracy: {test_accuracy:.4f}\")\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "# Calculate additional metrics with zero_division to handle undefined metrics\n",
        "accuracy = accuracy_score(y_test, y_pred_classes)\n",
        "precision = precision_score(y_test, y_pred_classes, average='macro', zero_division=0)\n",
        "recall = recall_score(y_test, y_pred_classes, average='macro', zero_division=0)\n",
        "f1 = f1_score(y_test, y_pred_classes, average='macro', zero_division=0)\n",
        "\n",
        "# Print the results\n",
        "print(f\"Accuracy: {accuracy:.4f}\")\n",
        "print(f\"Precision: {precision:.4f}\")\n",
        "print(f\"Recall: {recall:.4f}\")\n",
        "print(f\"F1 Score: {f1:.4f}\")\n",
        "\n",
        "# Classification report to summarize performance on test data\n",
        "report = classification_report(y_test, y_pred_classes, target_names=class_labels, zero_division=0)\n",
        "print(report)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YJRhGbRSdHna",
        "outputId": "b64b6b85-6553-4eee-bb5e-8f788bce275a"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading dataset...\n",
            "Total images: 843\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Preprocessing images in batches: 100%|██████████| 27/27 [00:06<00:00,  4.32it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting HOG features...\n",
            "Epoch 1/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 40ms/step - accuracy: 0.5569 - loss: 1.2984 - val_accuracy: 0.9112 - val_loss: 0.2551\n",
            "Epoch 2/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step - accuracy: 0.9800 - loss: 0.0620 - val_accuracy: 0.8935 - val_loss: 0.3084\n",
            "Epoch 3/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step - accuracy: 0.9919 - loss: 0.0175 - val_accuracy: 0.9290 - val_loss: 0.3138\n",
            "Epoch 4/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step - accuracy: 1.0000 - loss: 0.0031 - val_accuracy: 0.9172 - val_loss: 0.3422\n",
            "Epoch 5/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step - accuracy: 1.0000 - loss: 0.0012 - val_accuracy: 0.9231 - val_loss: 0.3013\n",
            "Epoch 6/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step - accuracy: 1.0000 - loss: 7.4500e-04 - val_accuracy: 0.9231 - val_loss: 0.3044\n",
            "Epoch 7/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step - accuracy: 1.0000 - loss: 6.7214e-04 - val_accuracy: 0.9231 - val_loss: 0.3047\n",
            "Epoch 8/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - accuracy: 1.0000 - loss: 4.8135e-04 - val_accuracy: 0.9231 - val_loss: 0.3056\n",
            "Epoch 9/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - accuracy: 1.0000 - loss: 4.4476e-04 - val_accuracy: 0.9231 - val_loss: 0.3057\n",
            "Epoch 10/10\n",
            "\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - accuracy: 1.0000 - loss: 4.1630e-04 - val_accuracy: 0.9231 - val_loss: 0.3060\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9282 - loss: 0.2696 \n",
            "Test Accuracy: 0.9231\n",
            "\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step\n",
            "Accuracy: 0.9231\n",
            "Precision: 0.8683\n",
            "Recall: 0.8018\n",
            "F1 Score: 0.8270\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "      000000       0.50      0.33      0.40         3\n",
            "      000001       0.96      0.94      0.95        51\n",
            "      000002       1.00      0.79      0.88        14\n",
            "      000003       0.92      0.95      0.93        81\n",
            "      000004       0.83      1.00      0.91        15\n",
            "      000005       1.00      0.80      0.89         5\n",
            "\n",
            "    accuracy                           0.92       169\n",
            "   macro avg       0.87      0.80      0.83       169\n",
            "weighted avg       0.92      0.92      0.92       169\n",
            "\n"
          ]
        }
      ]
    }
  ]
}